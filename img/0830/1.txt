import re
import logging

class CodeMerger:
    def __init__(self, template_filename, output_filename):
        self.template_filename = template_filename
        self.output_filename = output_filename
        # self.data_source_template_filename = data_source_template_filename

    def read_template(self):
        try:
            with open(self.template_filename, 'r', encoding='utf-8') as file:
                return file.read()
        except UnicodeDecodeError:
            # 如果 UTF-8 失败，尝试其他常见编码
            encodings = ['utf-8-sig', 'iso-8859-1', 'cp1252']
            for encoding in encodings:
                try:
                    with open(self.template_filename, 'r', encoding=encoding) as file:
                        return file.read()
                except UnicodeDecodeError:
                    continue
            
            # 如果所有尝试都失败，则抛出异常
            raise ValueError(f"Unable to read the file with any of the attempted encodings: {encodings}")

    def read_data_source_template(self, template_file):
        """Reads the data source template code from a file."""
        with open(template_file, "r") as file:
            return file.read()

    def write_output(self, code):
        """Writes the merged code to an output file."""
        with open(self.output_filename, "w") as file:
            file.write(code)
        print(f"Merged code written to {self.output_filename}")

    def extract_function_body(self, code, function_name):
        """Extracts the body of a function from the given source code."""
        pattern = rf"def {function_name}\((.*?)\):\n([\s\S]+?)(?=\n\s*def|\Z)"
        match = re.search(pattern, code)
        if match:
            params = match.group(1)
            body = self.clean_code(match.group(2))
            return params, body
        return None, None

    def clean_code(self, code):
        """Cleans unwanted characters and snippets from the code."""
        cleaned_code = re.sub(r'```', '', code)  # Removes stray backticks
        return cleaned_code

    def replace_function_body(self, template, function_name, new_params, new_body):
        """Replaces the function body in the template with a new body."""
        pattern = rf"def {function_name}\(.*?\):\n\s*pass\n"
        replacement = f"def {function_name}({new_params}):\n{new_body}"
        return re.sub(pattern, replacement, template)

    def read_file(self, filename):
        """Reads content from a file."""
        try:
            with open(filename, 'r', encoding='utf-8') as file:
                return file.read()
        except UnicodeDecodeError:
            # 如果 UTF-8 失败，尝试使用 GBK
            try:
                with open(filename, 'r', encoding='gbk') as file:
                    return file.read()
            except UnicodeDecodeError:
                # 如果 GBK 也失败，尝试使用 ISO-8859-1
                with open(filename, 'r', encoding='iso-8859-1') as file:
                    return file.read()

    def write_file(self, filename, content):
        """Writes content to a file."""
        with open(filename, 'w') as file:
            file.write(content)

    def get_function_name(self, data_source_type):
        function_names = {
            'local': 'data_resource_local',
            'yahoo': 'data_resource_yahoo',
            'nona': 'data_resource_nona'
        }
        if data_source_type not in function_names:
            raise ValueError("Invalid type. Must be 'local', 'yahoo', or 'nona'.")
        return function_names[data_source_type]

    # def replace_data_source_function(self, data_source_type):
    #     """
    #     Replaces the data_resource function in the my_backtrader_strategy.py file based on the specified type.
        
    #     :param source_data_template_file: File containing the data source templates
    #     :param data_source_type: String, either 'local', 'yahoo', or 'nona'
    #     """
    #     print("replace_data_source_function begin")
    #     # Read the current content of my_backtrader_strategy.py
    #     generated_code = self.read_file("my_backtrader_strategy.py")

    #     # Read the data source template
    #     data_source_template = self.read_file('data_resource_template.py')
    #     print("replace_data_source_function 111", generated_code)
    #     # if data_source_type == 'local':
    #     #     function_name = 'data_resource_local'
    #     # elif data_source_type == 'yahoo':
    #     #     function_name = 'data_resource_yahoo'
    #     # elif data_source_type == 'nona':
    #     #     function_name = 'data_resource_nona'
    #     # else:
    #     #     raise ValueError("Invalid type. Must be 'local', 'yahoo', or 'nona'.")
    #     function_name = self.get_function_name(data_source_type)

    #     params, new_body = self.extract_function_body(data_source_template, function_name)
    #     if new_body:
    #         generated_code = self.replace_function_body(generated_code, 'data_resource', 'request_data', new_body)
    #         print(f"Data source function replaced with {function_name}", generated_code)
            
    #         # Write the modified content back to my_backtrader_strategy.py
    #         self.write_file("my_backtrader_strategy.py", generated_code)
    #         print(f"Updated content written to {self.output_filename}")
    #     else:
    #         print(f"Function {function_name} not found in data source template.")
    #     return generated_code

    def replace_data_source_function(self, data_source_type):
        """
        Replaces the data_resource function in the my_backtrader_strategy.py file
        with the content from the corresponding template file based on the specified type.
        
        :param data_source_type: String, either 'local', 'yahoo', or 'nona'
        """
        print(f"replace_data_source_function: {data_source_type}")
        
        # Determine the template file name based on data_source_type
        template_file = f'data_source_{data_source_type}_template.py'
        
        # Read the current content of my_backtrader_strategy.py
        try:
            generated_code = self.read_file("my_backtrader_strategy.py")
        except Exception as e:
            print(f"Error reading my_backtrader_strategy.py: {str(e)}")
            return None
        
        # Read the content of the corresponding template file
        try:
            template_content = self.read_file(template_file)
        except FileNotFoundError:
            print(f"Template file {template_file} not found.")
            return generated_code
        except Exception as e:
            print(f"Error reading template file {template_file}: {str(e)}")
            return generated_code
        
        # Find the data_resource function in the generated code
        data_resource_pattern = r'def data_resource\(request_data\):.*?(?=\n\S)'
        match = re.search(data_resource_pattern, generated_code, re.DOTALL)
        
        if match:
            # Replace the entire data_resource function with the template content
            new_generated_code = generated_code[:match.start()] + template_content + generated_code[match.end():]
            print(f"Data source function replaced with content from {template_file}")
            
            # Write the modified content back to my_backtrader_strategy.py
            try:
                self.write_file("my_backtrader_strategy.py", new_generated_code)
                print(f"Updated content written to {self.output_filename}")
            except Exception as e:
                print(f"Error writing to my_backtrader_strategy.py: {str(e)}")
                return generated_code
            
            return new_generated_code
        else:
            print("data_resource function not found in my_backtrader_strategy.py")
            return generated_code
    
    def merge_code(self, source_code):
        """Merges source code into the template and replaces the data source function."""
        template_code = self.read_template()
        function_names = [
            "__init__", "pre_condition", "pre_condition_cancel",
            "buy_condition_1", "buy_condition_2", "buy_condition_3",
            "sell_condition_1", "sell_condition_2", "sell_condition_3"
        ]

        for function_name in function_names:
            params, body = self.extract_function_body(source_code, function_name)
            if body:
                template_code = self.replace_function_body(template_code, function_name, params, body)

        # Replace the data source function
        # template_code = self.replace_data_source_function(template_code, data_source_type)

        self.write_output(template_code)
        return template_code
    
# Example usage
if __name__ == "__main__":
    source_code = """
    def __init__(self):
        self.aroon_up = bt.indicators.AroonUp(period=14)
        self.aroon_down = bt.indicators.AroonDown(period=14)
        self.sma_10 = bt.indicators.SMA(period=10)
        self.sma_20 = bt.indicators.SMA(period=20)

    def pre_condition(self):
        return True
    def pre_condition_cancel(self):
        return False
    def buy_condition_1(self):
        return self.aroon_up[0] > self.aroon_down[0] and self.aroon_up[-1] <= self.aroon_down[-1]
    def buy_condition_2(self):
        return False
    def buy_condition_3(self):
        return False
    def sell_condition_1(self):
        return self.sma_10[0] < self.sma_20[0] and self.sma_10[-1] >= self.sma_20[-1]
    def sell_condition_2(self):
        return False
    def sell_condition_3(self):
        return False
    """
    merger = CodeMerger('strategy_template.py', 'my_backtrader_strategy.py')
    merger.merge_code(source_code)
